---

- name: VLAN COUNT ON Juniper JunOS and Cisco IOS switches
  hosts: l2device
  gather_facts: no
  vars:
    - result_dir: ./results/
    - compare: true
    - total_vlan_old: {}
    - total_voice_vlan_old: {}
  tasks:

  - name: read previous total VLAN infos
    include_vars: 
      file: "{{ result_dir }}{{ item }}.json"
      name: "{{ item }}_old"
    run_once: true
    loop: 
      - total_vlan
      - total_voice_vlan
    when: compare
    ignore_errors: true

  - name: remove local files
    file: 
      path: "{{ item }}"
      state: absent
    loop:
      - "{{ result_dir }}customer_vlan.json"
      - "{{ result_dir }}total_vlan.json"
      - "{{ result_dir }}total_voice_vlan.json"
      - "{{ result_dir }}customer_voice_vlan.json"
      - "{{ result_dir }}customer_vlan_diff.json"
      - "{{ result_dir }}customer_voice_vlan_diff.json"
    run_once: true

  # - name: read lookup variables from file
  #   include_vars: 
  #     file: ./files/lookup.txt
  #     name: lookup
  #   run_once: true
  - name: customer lookup variables 
    debug: 
      var: lookup
      verbosity: 2
    run_once: true


  - name: gather interface facts for JunOS Devices
    junipernetworks.junos.junos_facts:
      gather_subset: min
      gather_network_resources: 
            - l2_interfaces
            - vlans
    register: _junos_intf_facts
    vars:
      ansible_command_timeout: 60
    when: ansible_network_os == 'junos' and not inventory_hostname in groups['old']
    tags: vlan
  
  - name: OLD JUNOS DEVICES
    block:
      # - name: gather configuration for OLD JunOS Devices
      #   include_vars:
      #     file: junos.json
      #     name: _junos_conf
      # - set_fact:
      #     _junos_config: "{{ _junos_conf.configuration[0] }}"
      - name: get config from JunOS device
        junipernetworks.junos.junos_command:
          commands: 
            - "show configuration interfaces"
          display: json
        register: _junos_conf
      - set_fact:
          _junos_config: "{{ _junos_conf.stdout[0].configuration[0] }}"
      - set_fact:
          _vlan_ids: "{{ _junos_config | json_query('interfaces[0].interface[*].unit[0].family[0].\"ethernet-switching\"[0].vlan[0].members[0].data') }}"
          _voice_vlan_ids: "{{ _junos_config | json_query('\"ethernet-switching-options\"[0].voip[0].interface[*].vlan[0].data') }}"
          _vlans: "{{ _junos_config | json_query('vlans[0].vlan[*].{key: name.data, value: \"vlan-id\"[0].data}') | items2dict }}"
    when: ansible_network_os == 'junos' and inventory_hostname in groups['old']
   
  - name: gather interface facts for Cisco IOS Devices
    cisco.ios.ios_facts:
      gather_network_resources: 
        - l2_interfaces
        - vlans
    register: _intf_facts
    when: ansible_network_os == 'ios'
    become: true

  - name: facts output
    debug: 
      var: _junos_intf_facts
      verbosity: 2

  - set_fact:
      _l2_interfaces: "{{ _intf_facts.ansible_facts.ansible_network_resources }}"
    when: _intf_facts.ansible_facts is defined 
  
  - set_fact: 
      _l2_interfaces: "{{ _junos_intf_facts.ansible_facts.ansible_network_resources }}"
    when: _junos_intf_facts.ansible_facts is defined
    tags: vlan
  
  - name: L2 Interface variable
    debug: 
      var: _l2_interfaces
      verbosity: 2
    
  - set_fact:  
      _vlan_ids: "{{ _l2_interfaces | json_query('l2_interfaces[*].access.vlan')  }}"
      _voice_vlan_ids:  "{{ _l2_interfaces | json_query('l2_interfaces[*].voice.vlan')  }}"
      _vlans: "{{ _l2_interfaces | json_query('vlans[*].{key: name, value: vlan_id}') | items2dict }}"
    when: _l2_interfaces is defined
    tags: vlan
  
  - name: VLAN IDs
    debug:
      var: _vlan_ids
      verbosity: 2
  
  - name: VOICE VLAN IDs
    debug:
      var: _voice_vlan_ids
      verbosity: 2
  
  - name: VLANS
    debug:
      var: _vlans
      verbosity: 2
    tags: vlan

  - name: generate total VLAN reports
    template: 
      src: "./templates/{{ item }}.j2"
      dest: "{{ result_dir }}{{ item }}.json"
    delegate_to: localhost
    run_once: true
    loop: 
      - total_vlan
      - total_voice_vlan
  
  - name: read total VLAN infos
    include_vars: 
      file: "{{ result_dir }}{{ item }}.json"
      name: "{{ item }}_result"
    run_once: true
    loop: 
      - total_vlan
      - total_voice_vlan

  - name: generate customer VLAN report
    template: 
      src: ./templates/customer_vlan.j2
      dest: "{{ result_dir }}customer_vlan.json"
    delegate_to: localhost
    run_once: true

  - name: generate customer VLAN report DIFF
    template: 
      src: ./templates/customer_vlan_diff.j2
      dest: "{{ result_dir }}customer_vlan_diff.json"
    delegate_to: localhost
    run_once: true
    when: compare
    ignore_errors: true

  - name: prepare variables for voice vlan report
    set_fact:
      total_vlan_result: "{{ total_voice_vlan_result }}"
      total_vlan_old: "{{ total_voice_vlan_old }}"
  
  - name: generate customer VOICE VLAN report
    template: 
      src: ./templates/customer_vlan.j2
      dest: "{{ result_dir }}customer_voice_vlan.json"
    delegate_to: localhost
    run_once: true
  
  - name: generate customer VOICE VLAN report DIFF
    template: 
      src: ./templates/customer_vlan_diff.j2
      dest: "{{ result_dir }}customer_voice_vlan_diff.json"
    delegate_to: localhost
    run_once: true
    when: compare
    ignore_errors: true
